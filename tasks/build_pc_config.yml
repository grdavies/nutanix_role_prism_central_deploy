---
  - name: Find uuid for container "{{ nutanix_deploy_pc_container_name }}"
    block:
      - name: Get containers from Prism API
        uri:
          url: "{{ nutanix_api_v2 }}/storage_containers"
          method: GET
          validate_certs: "{{ validate_certs }}"
          body_format: json
          headers:
            Authorization: "{{ nutanix_api_auth }}"
          status_code: 200
          return_content: yes
        register: nutanix_current_containers
        ignore_errors: no

      - name: Search container list for container name and return its uuid
        set_fact:
          nutanix_deploy_pc_container_uuid: "{{ item }}"
        with_items: "{{ nutanix_current_containers.json | to_json | from_json | json_query(query) }}"
        vars:
          query: "entities[?name=='{{ nutanix_deploy_pc_container_name }}'].storage_container_uuid"
        when: nutanix_current_containers.json.metadata.total_entities > 0

  - name: Debug
    block:
      - name: Debug nutanix_current_containers.json
        debug:
          var: nutanix_current_containers.json

      - name: Debug nutanix_deploy_pc_container_uuid
        debug:
          var: nutanix_deploy_pc_container_uuid
    when:
      - nutanix_debug

  - ansible.builtin.fail:
      msg: "the container '{{ nutanix_deploy_pc_container_name }}' was not found. Please check the input variable nutanix_deploy_pc_container_name or that the container is present on this Nutanix cluster"
    when:
      - nutanix_deploy_pc_container_uuid is not defined

  - name: Find uuid for network "{{ nutanix_deploy_pc_subnet_name }}"
    block:
      - name: Get subnets from nutanix.ncp collection
        ntnx_subnets_info:
          nutanix_host: "{{ nutanix_host }}"
          nutanix_username: "{{ nutanix_username }}"
          nutanix_password: "{{ nutanix_password }}"
          validate_certs: "{{ validate_certs }}"
        register: nutanix_current_subnets

      - name: search subnets list for subnet name and return its uuid
        set_fact:
          nutanix_deploy_pc_network_uuid: "{{ item.metadata.uuid }}"
        when: item.status.name == nutanix_deploy_pc_subnet_name
        with_items: "{{ nutanix_current_subnets.response.entities }}"

  - name: Debug
    block:
      - name: Debug nutanix_current_subnets.response
        debug:
          var: nutanix_current_subnets.response

      - name: Debug nutanix_deploy_pc_network_uuid
        debug:
          var: nutanix_deploy_pc_network_uuid
    when:
      - nutanix_debug

  - ansible.builtin.fail:
      msg: "the subnet '{{ nutanix_deploy_pc_subnet_name }}' was not found. Please check the input variable nutanix_deploy_pc_subnet_name or that the subnet is present on this Nutanix cluster"
    when:
      - nutanix_deploy_pc_network_uuid is not defined

  - name: Get latest prism central version available for this AOS version if variable 'nutanix_deploy_pc_version' not provided
    block:
      - name: Get available PC versions
        uri:
          url: "{{ nutanix_api_v1 }}/upgrade/prism_central_deploy/softwares"
          method: GET
          validate_certs: "{{ validate_certs }}"
          body_format: json
          headers:
            Authorization: "{{ nutanix_api_auth }}"
          status_code: 200
          return_content: yes
        register: nutanix_deploy_pc_versions
        ignore_errors: no

      - name: Get latest PC for this clusters AOS release
        set_fact:
          nutanix_deploy_pc_rdates: "{{ nutanix_deploy_pc_versions.json | json_query('entities[*].releaseDate') | max }}"

      - name: Get latest PC version name for this clusters AOS release
        set_fact:
          nutanix_deploy_pc_version: "{{ nutanix_deploy_pc_versions.json | json_query(query) | join(\"\") }}"
        vars:
          query: "entities[?releaseDate==`{{ nutanix_deploy_pc_rdates }}`].version"

    when: nutanix_deploy_pc_version is not defined

  - name: Set default nutanix_ha_failover_enabled for "{{ nutanix_desired_ha_state }}"
    set_fact:
      nutanix_deploy_pc_num_sockets: "{{ nutanix_central_size_defaults | json_query(query) | first | json_query('nutanix_deploy_pc_num_sockets') }}"
      nutanix_deploy_pc_data_disk_size: "{{ nutanix_central_size_defaults | json_query(query) | first | json_query('nutanix_deploy_pc_data_disk_size') }}"
      nutanix_deploy_pc_memory_size: "{{ nutanix_central_size_defaults | json_query(query) | first | json_query('nutanix_deploy_pc_memory_size') }}"
    vars:
      query: "[?size==`{{ nutanix_deploy_pc_size }}`]"
    when:
      - nutanix_ha_failover_enabled is undefined

  - name: Debug
    block:
      - name: Debug nutanix_deploy_pc_version
        debug:
          var: nutanix_deploy_pc_version

      - name: Debug nutanix_deploy_pc_num_sockets
        debug:
          var: nutanix_deploy_pc_num_sockets

      - name: Debug nutanix_deploy_pc_data_disk_size
        debug:
          var: nutanix_deploy_pc_data_disk_size

      - name: Debug nutanix_deploy_pc_memory_size
        debug:
          var: nutanix_deploy_pc_memory_size
    when:
      - nutanix_debug
